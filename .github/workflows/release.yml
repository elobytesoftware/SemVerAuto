name: Release Workflow

on:
  push:
    branches:
      - main
      - releases/prod/*
      - releases/qa/*

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.18.0'

    - name: Generate Changelog
      id: changelog
      uses: TriPSs/conventional-changelog-action@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      if: ${{ steps.changelog.outputs.skipped == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: ${{ steps.changelog.outputs.tag }}
        body: ${{ steps.changelog.outputs.clean_changelog }}

    # Step to retrieve Vault secrets
    - name: Retrieve Secrets from Vault
      id: vault-secrets
      uses: hashicorp/vault-action@v2
      if: ${{ steps.changelog.outputs.skipped == 'false' }}
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: "token"
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          kv/data/SemVer dockerUsername | DOCKER_USERNAME;
          kv/data/SemVer dockerPassword | DOCKER_PASSWORD;
          kv/data/SemVer dockerImageURL | DOCKER_IMAGE_URL;
          kv/data/SemVer mainDeployHook | MAIN_DEPLOY_HOOK;
          kv/data/SemVer prodDeployHook | PROD_DEPLOY_HOOK;
          kv/data/SemVer qaDeployHook | QA_DEPLOY_HOOK


    # Step to log in to Docker Hub
    - name: Log in to Docker Hub
      run: echo ${{ steps.vault-secrets.outputs.DOCKER_PASSWORD }} | docker login -u ${{ steps.vault-secrets.outputs.DOCKER_USERNAME }} --password-stdin

    # Build Docker Image
    - name: Build Docker Image
      run: docker build -t ${{ steps.vault-secrets.outputs.DOCKER_IMAGE_URL }} .

    # Push Docker Image to Docker Hub
    - name: Push Docker Image
      run: docker push ${{ steps.vault-secrets.outputs.DOCKER_IMAGE_URL }}

    # Trigger Render Deployment using Deploy Hook
    - name: Dev Deployment
      run: curl -X POST ${{ steps.vault-secrets.outputs.MAIN_DEPLOY_HOOK }}

    - name: QA Deployment
      run: curl -X POST ${{ steps.vault-secrets.outputs.QA_DEPLOY_HOOK }}

    - name: Prod Deployment
      run: curl -X POST ${{ steps.vault-secrets.outputs.PROD_DEPLOY_HOOK }}



    # # Step 4: Deploy to Render using Render API (Create a new service)
    # - name: Create a New Service on Render
    #   env:
    #     RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}
    #     DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest
    #   run: |
    #     curl -X POST \
    #       -H "Authorization: Bearer $RENDER_API_TOKEN" \
    #       -H "Content-Type: application/json" \
    #       -d '{
    #         "serviceDetails": {
    #           "name": "my-react-app",                          
    #           "repo": {
    #             "provider": "github",
    #             "owner": "my-github-user",                     
    #             "name": "my-react-app",                        
    #             "branch": "main"
    #           },
    #           "env": "docker",
    #           "autoDeploy": true,
    #           "dockerDetails": {
    #             "dockerImage": "'"$DOCKER_IMAGE_URL"'",             
    #           }
    #         },
    #         "plan": "free"                                     
    #       }' \
    #       https://api.render.com/v1/services


