name: Release and Secrets

on:
  push:
    branches:
      - main
      - releases/prod/*
      - releases/qa/*

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.18.0'

    - name: Generate Changelog
      id: changelog
      uses: TriPSs/conventional-changelog-action@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      if: ${{ steps.changelog.outputs.skipped == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: ${{ steps.changelog.outputs.tag }}
        body: ${{ steps.changelog.outputs.clean_changelog }}

  retrieve_secrets:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
    # Step to retrieve Vault secrets
    - name: Retrieve Secrets from Vault
      id: vault-secrets
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: "token"
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          kv/data/SemVer dockerUsername | DOCKER_USERNAME;
          kv/data/SemVer dockerPassword | DOCKER_PASSWORD;
          kv/data/SemVer dockerImageURL | DOCKER_IMAGE_URL;
          kv/data/SemVer mainDeployHook | MAIN_DEPLOY_HOOK;
          kv/data/SemVer prodDeployHook | PROD_DEPLOY_HOOK;
          kv/data/SemVer qaDeployHook | QA_DEPLOY_HOOK

    - name: Determine Environment
      id: set-environment
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == refs/heads/releases/qa* ]]; then
          echo "ENVIRONMENT=QA" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == refs/heads/releases/prod* ]]; then
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV
        fi
    
    - name: Set Environment Variables
      run: |
        echo '{
          "DOCKER_USERNAME": "${{ steps.vault-secrets.outputs.DOCKER_USERNAME }}",
          "DOCKER_PASSWORD":  "${{ steps.vault-secrets.outputs.DOCKER_PASSWORD }}", 
          "DOCKER_IMAGE_URL": "${{ steps.vault-secrets.outputs.DOCKER_IMAGE_URL }}", 
          "MAIN_DEPLOY_HOOK": "${{ steps.vault-secrets.outputs.MAIN_DEPLOY_HOOK }}", 
          "PROD_DEPLOY_HOOK": "${{ steps.vault-secrets.outputs.PROD_DEPLOY_HOOK }}", 
          "QA_DEPLOY_HOOK": "${{ steps.vault-secrets.outputs.QA_DEPLOY_HOOK }}",
          "ENVIRONMENT": "${{ env.ENVIRONMENT }}"
          }' > secrets.json

    - name: Upload Secrets Artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-secrets
        path: ./secrets.json 

    - name: List artifacts
      run: ls -alh


    # - name: Use the Retrieved Secrets
    #   run: |
    #     echo "username: ${{ steps.vault-secrets.outputs.DOCKER_USERNAME }}"
    #     echo "password: ${{ steps.vault-secrets.outputs.DOCKER_PASSWORD }}"

    # # Step to log in to Docker Hub
    # - name: Log in to Docker Hub
    #   run: echo ${{ steps.vault-secrets.outputs.DOCKER_PASSWORD }} | docker login -u ${{ steps.vault-secrets.outputs.DOCKER_USERNAME }} --password-stdin

    # # Build Docker Image
    # - name: Build Docker Image
    #   run: docker build -t ${{ steps.vault-secrets.outputs.DOCKER_IMAGE_URL }} .

    # # Push Docker Image to Docker Hub
    # - name: Push Docker Image
    #   run: docker push ${{ steps.vault-secrets.outputs.DOCKER_IMAGE_URL }}

    # - name: Trigger Deployment
    #   run: |
    #       if [ "${{ github.ref }}" == "refs/heads/main" ]; then
    #         curl -X POST ${{ steps.vault-secrets.outputs.MAIN_DEPLOY_HOOK }};
    #       elif [[ "${{ github.ref }}" == refs/heads/releases/qa* ]]; then
    #         curl -X POST ${{ steps.vault-secrets.outputs.QA_DEPLOY_HOOK }};
    #       elif [[ "${{ github.ref }}" == refs/heads/releases/prod* ]]; then
    #         curl -X POST ${{ steps.vault-secrets.outputs.PROD_DEPLOY_HOOK }};
    #       fi
    #   if: ${{ steps.vault-secrets.outputs.MAIN_DEPLOY_HOOK != '0' || steps.vault-secrets.outputs.QA_DEPLOY_HOOK != '0' || steps.vault-secrets.outputs.PROD_DEPLOY_HOOK != '0' }}


    # - name: Create New Service on Render
    #   if: |
    #     github.ref == 'refs/heads/main' && steps.vault-secrets.outputs.MAIN_DEPLOY_HOOK == '0' ||
    #     startsWith(github.ref, 'refs/heads/releases/qa') && steps.vault-secrets.outputs.QA_DEPLOY_HOOK == '0' ||
    #     startsWith(github.ref, 'refs/heads/releases/prod') && steps.vault-secrets.outputs.PROD_DEPLOY_HOOK == '0'
    #   env:
    #     RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}
    #     BRANCH: ${{ github.ref_name }}
    #     DOCKER_IMAGE: ${{ steps.vault-secrets.outputs.DOCKER_IMAGE_URL }}
    #     SERVICE_NAME: ${{ github.ref == 'refs/heads/main' && 'my-dev-app' || startsWith(github.ref, 'refs/heads/releases/qa') && 'my-qa-app' || startsWith(github.ref, 'refs/heads/releases/prod') && 'my-prod-app' }}
    #   run: |
    #     echo "Creating a new Render service for the $BRANCH environment: ${{SERVICE_NAME}}"
    #     curl -X POST \
    #       -H "Authorization: Bearer ${{RENDER_API_TOKEN}}" \
    #       -H "Content-Type: application/json" \
    #       -d '{
    #         "serviceDetails": {
    #           "name": "${{SERVICE_NAME}}",
    #           "repo": {
    #             "provider": "github",
    #             "owner": "my-github-user",
    #             "name": "my-repo-name",
    #             "branch": "'"${BRANCH}"'"
    #           },
    #           "env": "docker",
    #           "autoDeploy": true,
    #           "dockerDetails": {
    #             "dockerImage": "'"${DOCKER_IMAGE}"'"
    #           }
    #         },
    #         "plan": "free"
    #       }' \
    #       https://api.render.com/v1/services
    